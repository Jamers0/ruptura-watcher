import { LocalStorageManager } from '@/lib/localStorage';
import type { Rutura } from '@/lib/types';

export class TesteSalvamento {
  /**
   * Testa se o localStorage est√° funcionando corretamente
   */
  static testarLocalStorage(): boolean {
    try {
      const dadosTeste: Rutura[] = [
        {
          semana: 'Teste de Salvamento',
          hora_rutura: '14:00',
          hora_da_rutura: '14:00',
          secao: 'TESTE',
          tipo_requisicao: 'TESTE',
          ot: 'TESTE001',
          req: 'REQ001',
          tipo_produto: 'TESTE',
          numero_produto: '999999',
          descricao: 'Produto de Teste de Salvamento',
          qtd_req: 1,
          qtd_env: 0,
          qtd_falta: 1,
          un_med: 'UN',
          data: '2025-08-12',
          data_requisicao: '2025-08-12',
          stock_ct: 0,
          stock_ff: 0,
          em_transito_ff: 0,
          tipologia_rutura: 'TESTE',
          aba_origem: '14H'
        }
      ];

      console.log('üß™ INICIANDO TESTE DE SALVAMENTO...');
      
      // Teste 1: Salvamento for√ßado
      const salvou = LocalStorageManager.forcarSalvamento(dadosTeste);
      if (!salvou) {
        console.error('‚ùå Falhou no salvamento for√ßado');
        return false;
      }

      // Teste 2: Verifica√ß√£o imediata
      const carregou = LocalStorageManager.loadData();
      if (carregou.length !== 1) {
        console.error('‚ùå Falhou no carregamento imediato');
        return false;
      }

      // Teste 3: Informa√ß√µes dos dados
      const info = LocalStorageManager.getDataInfo();
      console.log('üìä Info dos dados:', info);

      console.log('‚úÖ TESTE DE SALVAMENTO CONCLU√çDO COM SUCESSO');
      return true;
    } catch (error) {
      console.error('‚ùå ERRO NO TESTE DE SALVAMENTO:', error);
      return false;
    }
  }

  /**
   * For√ßa salvamento de dados existentes no contexto
   */
  static salvarDadosExistentes(ruturas: Rutura[]): void {
    console.log('üíæ SALVANDO DADOS EXISTENTES:', ruturas.length, 'registros');
    
    if (ruturas.length === 0) {
      console.warn('‚ö†Ô∏è Nenhum dado para salvar');
      return;
    }

    const sucesso = LocalStorageManager.forcarSalvamento(ruturas);
    if (sucesso) {
      console.log('‚úÖ DADOS SALVOS COM SUCESSO');
    } else {
      console.error('‚ùå FALHA NO SALVAMENTO DOS DADOS');
    }
  }

  /**
   * Limpa e verifica se foi limpo
   */
  static testarLimpeza(): boolean {
    console.log('üóëÔ∏è TESTANDO LIMPEZA...');
    
    const limpou = LocalStorageManager.clearData();
    if (!limpou) {
      console.error('‚ùå Falhou na limpeza');
      return false;
    }

    const dados = LocalStorageManager.loadData();
    if (dados.length !== 0) {
      console.error('‚ùå Dados ainda existem ap√≥s limpeza');
      return false;
    }

    console.log('‚úÖ LIMPEZA CONCLU√çDA COM SUCESSO');
    return true;
  }
}
